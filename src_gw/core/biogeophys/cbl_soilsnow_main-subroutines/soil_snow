  SUBROUTINE soil_snow(dels, soil, ssnow, canopy, met, bal, veg)
    USE cable_common_module
!all subrs-implement ONLY:
USE cbl_soil_snow_subrs_module

    REAL, INTENT(IN)                    :: dels ! integration time step (s)
    TYPE(soil_parameter_type), INTENT(INOUT) :: soil
    TYPE(soil_snow_type), INTENT(INOUT)      :: ssnow
    TYPE(canopy_type), INTENT(INOUT)         :: canopy
    TYPE(veg_parameter_type), INTENT(INOUT)  :: veg
    TYPE(met_type), INTENT(INOUT)            :: met ! all met forcing
    TYPE (balances_type), INTENT(INOUT)      :: bal
    INTEGER             :: k
    REAL, DIMENSION(mp) :: snowmlt
    REAL, DIMENSION(mp) :: totwet
    REAL, DIMENSION(mp) :: weting
    REAL, DIMENSION(mp) :: xx, tgg_old, tggsn_old
    REAL(r_2), DIMENSION(mp) :: xxx,deltat,sinfil1,sinfil2,sinfil3
    REAL                :: zsetot
    INTEGER, SAVE :: ktau =0

    CALL point2constants( C )

    ktau = ktau +1

    !jhan - make switchable
    ! appropriate for ACCESS1.0
    !max_glacier_snowd = 50000.0
    ! appropriate for ACCESS1.3
    !max_glacier_snowd = 1100.0

    zsetot = SUM(soil%zse)
    ssnow%tggav = 0.
    DO k = 1, ms
       ssnow%tggav = ssnow%tggav  + soil%zse(k)*ssnow%tgg(:,k)/zsetot
    END DO


    IF( cable_runtime%offline .OR. cable_runtime%mk3l ) THEN
       ssnow%t_snwlr = 0.05
    ENDIF

    ssnow%fwtop1 = 0.0
    ssnow%fwtop2 = 0.0
    ssnow%fwtop3 = 0.0
    ssnow%runoff = 0.0 ! initialise total runoff
    ssnow%rnof1 = 0.0 ! initialise surface runoff
    ssnow%rnof2 = 0.0 ! initialise deep drainage
    ssnow%smelt = 0.0 ! initialise snowmelt
    ssnow%dtmlt = 0.0
    ssnow%osnowd = ssnow%snowd

    IF (cable_user%soil_thermal_fix) THEN
       soil%heat_cap_lower_limit(:,:) = 0.01  !never allow /0
    ELSE
       DO k=1,ms
          soil%heat_cap_lower_limit(:,k) = soil%css(:) * soil%rhosoil(:)
       END DO
    END IF
    ssnow%wbliq = ssnow%wb - ssnow%wbice

    DO k = 1, ms ! for stempv

       ! Set liquid soil water fraction (fraction of saturation value):
       ssnow%wblf(:,k) = MAX( 0.01_r_2, (ssnow%wb(:,k) - ssnow%wbice(:,k)) )    &
            & / REAL(soil%ssat,r_2)

       ! Set ice soil water fraction (fraction of saturation value):
       ssnow%wbfice(:,k) = REAL(ssnow%wbice(:,k)) / soil%ssat
    END DO

    CALL snowcheck (dels, ssnow, soil, met )

    CALL snowdensity (dels, ssnow, soil)

    CALL snow_accum (dels, canopy, met, ssnow, soil )

    CALL snow_melting (dels, snowmlt, ssnow, soil )

    ! Add snow melt to global snow melt variable:
    ssnow%smelt = snowmlt

    ! Adjust levels in the snowpack due to snow accumulation/melting,
    ! snow aging etc...
    CALL snowl_adjust(dels, ssnow, canopy )

    CALL stempv(dels, canopy, ssnow, soil)

    ssnow%tss =  (1-ssnow%isflag)*ssnow%tgg(:,1) + ssnow%isflag*ssnow%tggsn(:,1)

    CALL snow_melting (dels, snowmlt, ssnow, soil )

    ! Add new snow melt to global snow melt variable:
    ssnow%smelt = ssnow%smelt + snowmlt

    CALL remove_trans(dels, soil, ssnow, canopy, veg)

    CALL  soilfreeze(dels, soil, ssnow)

    totwet = canopy%precis + ssnow%smelt

    ! total available liquid including puddle
    weting = totwet + MAX(0._r_2,ssnow%pudsto - canopy%fesp/C%HL*dels)
    xxx=soil%ssat - ssnow%wb(:,1)

    sinfil1 = MIN( 0.95*xxx*soil%zse(1)*C%density_liq, weting) !soil capacity
    xxx=soil%ssat - ssnow%wb(:,2)
    sinfil2 = MIN( 0.95*xxx*soil%zse(2)*C%density_liq, weting - REAL(sinfil1)) !soil capacity
    xxx=soil%ssat - ssnow%wb(:,3)
    sinfil3 = MIN( 0.95*xxx*soil%zse(3)*C%density_liq,weting-REAL(sinfil1)-REAL(sinfil2))

    ! net water flux to the soil
    ssnow%fwtop1 = sinfil1 / dels - canopy%segg
    ssnow%fwtop2 = sinfil2 / dels
    ssnow%fwtop3 = sinfil3 / dels

    ! Puddle for the next time step
    ssnow%pudsto = MAX( 0._r_2, weting - sinfil1 - sinfil2 - sinfil3 )
    ssnow%rnof1 = MAX(0.,ssnow%pudsto - ssnow%pudsmx)
    ssnow%pudsto = ssnow%pudsto - ssnow%rnof1

    CALL surfbv(dels, met, ssnow, soil, veg, canopy )


    ! correction required for energy balance in online simulations
    IF( cable_runtime%um ) THEN

       !cls package - rewritten for flexibility
       canopy%fhs_cor = ssnow%dtmlt(:,1)*ssnow%dfh_dtg
       !canopy%fes_cor = ssnow%dtmlt(:,1)*(ssnow%dfe_ddq * ssnow%ddq_dtg)
       canopy%fes_cor = ssnow%dtmlt(:,1)*ssnow%dfe_dtg

       canopy%fhs = canopy%fhs+canopy%fhs_cor
       canopy%fes = canopy%fes+canopy%fes_cor

       !REV_CORR associated changes to other energy balance terms
       !NB canopy%fns changed not rad%flws as the correction term needs to
       !pass through the canopy in entirety, not be partially absorbed
       IF (cable_user%L_REV_CORR) THEN
          canopy%fns_cor = ssnow%dtmlt(:,1)*ssnow%dfn_dtg
          canopy%ga_cor = ssnow%dtmlt(:,1)*canopy%dgdtg

          canopy%fns = canopy%fns + canopy%fns_cor
          canopy%ga = canopy%ga + canopy%ga_cor

          canopy%fess = canopy%fess + canopy%fes_cor
       ENDIF
    ENDIF

    ! redistrb (set in cable.nml) by default==.FALSE.
    IF( redistrb )                                                              &
         CALL hydraulic_redistribution( dels, soil, ssnow, canopy, veg, met )

    ssnow%smelt = ssnow%smelt/dels

    ! Set weighted soil/snow surface temperature
    ssnow%tss=(1-ssnow%isflag)*ssnow%tgg(:,1) + ssnow%isflag*ssnow%tggsn(:,1)

    ssnow%wbliq = ssnow%wb - ssnow%wbice

    ssnow%wbtot = 0.0
    DO k = 1, ms
       ssnow%wbtot = ssnow%wbtot + REAL(ssnow%wb(:,k)*1000.0*soil%zse(k),r_2)
    END DO

  END SUBROUTINE soil_snow