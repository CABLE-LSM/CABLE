  SUBROUTINE saturated_fraction(ssnow,soil,veg)
    TYPE (soil_snow_type), INTENT(INOUT)      :: ssnow ! soil and snow variables
    TYPE (soil_parameter_type), INTENT(IN)    :: soil  ! soil parameters
    TYPE(veg_parameter_type) , INTENT(IN)    :: veg  ! veg parameters

    REAL(r_2), DIMENSION(mp) :: S
    REAL(r_2) :: slopeSTDmm
    INTEGER :: i,k

    !if !gw_model and !or_evap:
    !in cable_um_init_subrs.F90 or cable_parameters:
    !  ssat_vec(i,:) = ssat
    !  zse_vec(i,:)  = zse
    !  UM: slope_std read in
    ! offline: slope_std read in or set to const
    !  all gw_params set by default in cable_common
    ! doesn do anything but cannot hurt


    S(:) = 0._r_2
    DO k=1,gw_params%level_for_satfrac
       S(:) = S(:) + MAX(0.01,MIN(1.0, &
            (ssnow%wb(:,k)-ssnow%wbice(:,k)-soil%watr(:,k))/&
            MAX(0.001,soil%ssat_vec(:,k)-soil%watr(:,k)) ) )*soil%zse_vec(:,k)
    END DO
    S(:) = S(:)/SUM(soil%zse(1:gw_params%level_for_satfrac),dim=1)
    !srf frozen fraction.  should be based on topography
    DO i = 1,mp
       !Saturated fraction
       IF (gw_params%MaxSatFraction .GT. 1e-7 .AND. veg%iveg(i) .LT. 16) THEN
          slopeSTDmm = SQRT(MIN(MAX(&
               gw_params%MaxSatFraction*soil%slope_std(i),&
               1e-5),10000._r_2)) ! ensure some variability
          ssnow%satfrac(i)    = MAX(0._r_2,MIN(0.99_r_2,&
                                !note UM wants std03, and erf is not included then
               1._r_2 - my_erf( slopeSTDmm / SQRT(2.0* S(i)) ) ) )
       ELSEIF (veg%iveg(i) .LT. 16) THEN
          ssnow%satfrac(i) = 0._r_2
       ELSE
          ssnow%satfrac(i) = 0.975
       END IF
    END DO


  END SUBROUTINE saturated_fraction