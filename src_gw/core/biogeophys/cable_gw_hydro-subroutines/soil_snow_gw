  ! Inputs:
  !	 dt_in - time step in sec
  !	 ktau_in - time step no.
  !	 ga	 - ground heat flux W/m^2
  !	 dgdtg	 -
  !	 condxpr - total precip reaching the ground (liquid and solid)
  !	 scondxpr - precip (solid only)
  !	 fev   - transpiration (W/m2)
  !	 fes   - soil evaporation (W/m2)
  !	 isoil - soil type
  !	 ivegt - vegetation type
  ! Output
  !	 ssnow
  SUBROUTINE soil_snow_gw(dels, soil, ssnow, canopy, met, bal, veg)
    USE cable_IO_vars_module, ONLY: wlogn

    USE cable_common_module
    REAL                     , INTENT(IN)     :: dels ! integration time step (s)
    TYPE(soil_parameter_type), INTENT(INOUT)  :: soil
    TYPE(soil_snow_type)     , INTENT(INOUT)  :: ssnow
    TYPE(canopy_type)        , INTENT(INOUT)  :: canopy
    TYPE(veg_parameter_type) , INTENT(INOUT)  :: veg
    TYPE(met_type)           , INTENT(INOUT)  :: met ! all met forcing
    TYPE (balances_type)     , INTENT(INOUT)  :: bal

    INTEGER             :: k,i
    REAL, DIMENSION(mp) :: snowmlt
    REAL, DIMENSION(mp) :: GWwb_ic
    REAL, DIMENSION(mp,ms) :: tgg_old
    REAL, DIMENSION(mp) :: tggsn_old,wbtot_ic,del_wbtot
    REAL(r_2), DIMENSION(mp) :: xx
    REAL                :: zsetot
    INTEGER, SAVE :: ktau =0
    REAL(r_2) :: wb_lake_T, rnof2_T
    LOGICAL :: use_sli
    LOGICAL, SAVE :: first_gw_hydro_call = .TRUE.

    use_sli = .FALSE.

    ktau = ktau +1

    zsetot = SUM(soil%zse)
    ssnow%tggav = 0.

    CALL point2constants( C )

    DO k = 1, ms

       ssnow%tggav = ssnow%tggav  + soil%zse(k)*ssnow%tgg(:,k)/zsetot

    END DO


    IF( cable_runtime%offline .OR. cable_runtime%mk3l ) ssnow%t_snwlr = 0.05_r_2

    DO i=1,mp
       ssnow%fwtop1(i) = 0.0
       ssnow%fwtop2(i) = 0.0
       ssnow%fwtop3(i) = 0.0
       ssnow%runoff(i) = 0.0 ! initialise total runoff
       ssnow%rnof1(i) = 0.0 ! initialise surface runoff
       ssnow%rnof2(i) = 0.0 ! initialise deep drainage
       ssnow%smelt(i) = 0.0 ! initialise snowmelt
       ssnow%dtmlt(i,:) = 0.0
       ssnow%osnowd(i) = ssnow%snowd(i)
       ! Scaling  runoff to kg/m^2/s (mm/s) to match rest of the model
       ssnow%sinfil(i) = 0.0
       ssnow%qhz(i) = 0.0
    END DO

    IF (cable_user%soil_thermal_fix) THEN
       soil%heat_cap_lower_limit(:,:) = 0.01  !never allow /0
    ELSE
       soil%heat_cap_lower_limit(:,:) = soil%css_vec(:,:) * soil%rhosoil_vec(:,:)
    END IF

    IF( (.NOT.cable_user%cable_runtime_coupled ) .AND. (first_gw_hydro_call)) THEN

       IF (cable_runtime%um) canopy%dgdtg = 0.0 ! RML added um condition
       ! after discussion with BP
       ! N.B. snmin should exceed sum of layer depths, i.e. .11 m
       ssnow%wbtot = 0.0
       ssnow%wb(:,:)  = MIN( soil%ssat_vec(:,:), MAX ( ssnow%wb(:,:), 0.5*soil%swilt_vec(:,:) ) )

       DO k = 1, ms

          WHERE( ssnow%tgg(:,k) <= C%TFRZ .AND. ssnow%wbice(:,k) <= 0.001*ssnow%wb(:,k) )   &
               ssnow%wbice(:,k) = 0.5 * ssnow%wb(:,k)

          !WHERE( ssnow%tgg(:,k) < C%TFRZ)                                    &
          !   ssnow%wbice(:,k) = 0.8 * ssnow%wb(:,k)

       END DO

       WHERE ( soil%isoilm .EQ. 9)! .and. ssnow%snowd .le. 0.1*max_glacier_snowd)

          ! permanent ice: fix hard-wired number in next version
          ssnow%snowd = max_glacier_snowd
          ssnow%osnowd = max_glacier_snowd
          ssnow%tgg(:,1) = ssnow%tgg(:,1) - 1.0

       END WHERE

       WHERE ( SPREAD(soil%isoilm,2,ms) .EQ. 9 )

          ssnow%wb    = 0.95 * soil%ssat_vec
          ssnow%wbice = 0.95 * ssnow%wb

       END WHERE

    END IF


    tgg_old = ssnow%tgg

    !Start with wb and wbice.  Need wbliq, wmliq,wmice,wmtot
    !find the mass of ice and liq from the prognostic volumetric values
    DO k=1,ms
       DO i=1,mp
          ssnow%wbliq(i,k) = ssnow%wb(i,k) - ssnow%wbice(i,k)                     !liquid volume
          ssnow%wmice(i,k) = ssnow%wbice(i,k)*REAL(C%density_ice*soil%zse(k),r_2) !ice mass
          ssnow%wmliq(i,k) = ssnow%wbliq(i,k)*REAL(C%density_liq*soil%zse(k),r_2) !liquid mass
          ssnow%wmtot(i,k) = ssnow%wmice(i,k) + ssnow%wmliq(i,k)                  !liq+ice mass
          ssnow%wblf(i,k)   = MAX(ssnow%wbliq(i,k)/soil%ssat_vec(i,k),0.01_r_2)
          ssnow%wbfice(i,k) = MAX(ssnow%wbice(i,k)/soil%ssat_vec(i,k),0._r_2)

       END DO
    END DO


    IF( first_gw_hydro_call ) THEN

       DO i=1,mp
          ssnow%gammzz(i,1) = MAX(soil%heat_cap_lower_limit(i,1),&
               (1.0-soil%ssat_vec(i,1))*&
               soil%css_vec(i,1) * soil%rhosoil_vec(i,1)  &
               & + ssnow%wbliq(i,1) * C%cs_rho_wat           &
               & + ssnow%wbice(i,1) * C%cs_rho_ice ) * soil%zse(1) +   &
               & (1. - ssnow%isflag(i)) * C%cgsnow * ssnow%snowd(i)

       END DO

    ENDIF  ! if(.NOT.cable_runtime_coupled) and first_gw_hydro_call


    DO i=1,mp
       !initial water in the soil column
       wbtot_ic(i)  = SUM(ssnow%wbliq(i,:)*C%density_liq*soil%zse(:),1) + &
            SUM(ssnow%wbice(i,:)*C%density_ice*soil%zse(:),1) + &
            ssnow%GWwb(i)*soil%GWdz(i)*C%density_liq

       GWwb_ic(i) = ssnow%GWwb(i)

    END DO

    !improve hiding, call single soilsnow subroutine to do all the
    !snow processes and thermal soil calculations

    CALL snow_processes_soil_thermal(dels,ssnow,soil,veg,canopy,met,bal,snowmlt)

    !leave here for now, could move into soilsnow as well
    CALL remove_transGW(dels, soil, ssnow, canopy, veg)        !transpiration loss per soil layer

    CALL  GWsoilfreeze(dels, soil, ssnow,tgg_old)

    ssnow%fwtop = canopy%precis/dels + ssnow%smelt/dels   !water from canopy and snowmelt [mm/s]

    CALL iterative_wtd (ssnow, soil, veg, .TRUE. )

    CALL ovrlndflx (dels, ssnow, soil, veg, canopy,use_sli )         !surface runoff, incorporate ssnow%pudsto?

    ssnow%sinfil = ssnow%fwtop - canopy%segg  !canopy%fes/C%hl               !remove soil evap from throughfall

    CALL smoistgw (dels,ktau,ssnow,soil,veg,canopy)               !vertical soil moisture movement.

    ! correction required for energy balance in online simulations
    IF( cable_runtime%um ) THEN

       !cls package - rewritten for flexibility
       canopy%fhs_cor = ssnow%dtmlt(:,1)*ssnow%dfh_dtg
       !canopy%fes_cor = ssnow%dtmlt(:,1)*(ssnow%dfe_ddq * ssnow%ddq_dtg)
       canopy%fes_cor = ssnow%dtmlt(:,1)*ssnow%dfe_dtg

       canopy%fhs = canopy%fhs+canopy%fhs_cor
       canopy%fes = canopy%fes+canopy%fes_cor

       !REV_CORR associated changes to other energy balance terms
       !NB canopy%fns changed not rad%flws as the correction term needs to
       !pass through the canopy in entirety, not be partially absorbed
       IF (cable_user%L_REV_CORR) THEN
          canopy%fns_cor = ssnow%dtmlt(:,1)*ssnow%dfn_dtg
          canopy%ga_cor = ssnow%dtmlt(:,1)*canopy%dgdtg

          canopy%fns = canopy%fns + canopy%fns_cor
          canopy%ga = canopy%ga + canopy%ga_cor

          canopy%fess = canopy%fess + canopy%fes_cor
       ENDIF
    ENDIF

    DO i=1,mp
       ssnow%pudsto(i) = 0.0  !no puddle
       ssnow%smelt(i)  = ssnow%smelt(i)/dels    !change units to mm/s.  cable_driver then reverts back to mm
       ssnow%runoff(i) = (ssnow%rnof1(i) + ssnow%rnof2(i))!*dels  !cable_driver converts from mm/s to mm
       !rnof1 and rnof2 are already in mm/s
       ! Set weighted soil/snow surface temperature
       ssnow%tss(i) =  (1-ssnow%isflag(i))*ssnow%tgg(i,1) + ssnow%isflag(i)*ssnow%tggsn(i,1)

       !total water mass at the end of the soilsnow_GW routine
       ssnow%wbtot(i)  = SUM(ssnow%wbliq(i,:)*C%density_liq*soil%zse(:),dim=1) + &
            SUM(ssnow%wbice(i,:)*C%density_ice*soil%zse(:),dim=1) + &
            ssnow%GWwb(i)*soil%GWdz(i)*C%density_liq

       !for debug water balance.  del_wbtot = fluxes = infiltration [though-evap] - trans - qhorz drainage
       del_wbtot(i)   = dels * (ssnow%sinfil(i) - ssnow%rnof2(i) - canopy%fevc(i) / C%hl)
       !set below to keep track of water imbalance within the GW module explicitly.  also must change cable_checks
       !ssnow%wbtot(i) = ssnow%wbtot(i)-wbtot_ic(i)

    END DO

  END SUBROUTINE soil_snow_gw