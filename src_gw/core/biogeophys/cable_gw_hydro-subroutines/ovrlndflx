  SUBROUTINE ovrlndflx (dels, ssnow, soil,veg, canopy,sli_call )
    USE cable_common_module, ONLY : gw_params,cable_user

    IMPLICIT NONE
    REAL, INTENT(IN)                         :: dels ! integration time step (s)
    TYPE(soil_snow_type), INTENT(INOUT)      :: ssnow  ! soil+snow variables
    TYPE(soil_parameter_type), INTENT(INOUT)    :: soil ! soil parameters
    TYPE(veg_parameter_type) , INTENT(INOUT)    :: veg  ! veg parameters
    TYPE (canopy_type), INTENT(INOUT)           :: canopy
    LOGICAL, INTENT(IN)                      :: sli_call
    INTEGER                                  :: nglacier ! 0 original, 1 off, 2 new Eva
    INTEGER                                  :: k, i, j
    REAL, DIMENSION(mp)                :: rnof5
    REAL, DIMENSION(mp)                :: sgamm
    REAL, DIMENSION(mp)                :: smasstot
    REAL, DIMENSION(mp,0:3)            :: smelt1                   !snow melt
    REAL(r_2), DIMENSION(mp)           :: icef,efpor               !tmp vars, fraction of ice in gridcell
    REAL(r_2)                          :: tmpa,tmpb,qinmax         !tmp vars, maximum infiltration [mm/s]
    REAL(r_2), DIMENSION(mp)           :: satfrac_liqice,S       !saturated fraction of cell, wtd in m
    REAL(r_2)                          :: liqmass,icemass,totmass  !liquid mass,ice mass, total mass [mm]
    REAL(r_2)                          :: fice
    REAL(r_2)                          :: dzmm,slopeSTDmm

    !For now assume there is no puddle
    dzmm = 1000._r_2 * soil%zse(1)

    IF (sli_call) THEN
       DO i=1,mp
          IF (canopy%through(i) .GE. canopy%through_sn(i)) THEN
             ssnow%fwtop(i)  = MAX((canopy%through(i)-canopy%through_sn(i))/dels , 0.)             ! liq precip rate (m s-1)
          ELSE
             ssnow%fwtop(i) = MAX(canopy%through(i), 0.)
          END IF
       END DO
    END IF
    !amount of ice in surface layer
    DO i = 1,mp
       efpor(i) = MAX(0.001_r_2, soil%ssat_vec(i,1) - ssnow%wbice(i,1))
       icemass  = ssnow%wbice(i,1) * dzmm
       liqmass  = (ssnow%wb(i,1)-ssnow%wbice(i,1)) * dzmm
       totmass  = MAX(liqmass+icemass,REAL(1e-2,r_2))
       icef(i)     = MAX(0._r_2,MIN(1._r_2,gw_params%IceBeta*icemass / totmass))
    END DO

    !sat fraction assuming topo controlled subgrid soil moisture distribution
    !called from cable_canopy for srf wet fraction alrady
    !call saturated_fraction(ssnow,soil,veg)

    !srf frozen fraction.  should be based on topography
    DO i = 1,mp
       fice = (EXP(-gw_params%IceAlpha*(1._r_2-icef(i)))-EXP(-gw_params%IceAlpha))/(1._r_2-EXP(-gw_params%IceAlpha))
       fice  = MIN(MAX(fice,0._r_2),1._r_2)
       satfrac_liqice(i)   = MAX(0.,MIN(0.95,fice + (1._r_2-fice)*ssnow%satfrac(i) ) )
    END DO

    DO i=1,mp
       tmpa = ssnow%wbliq(i,1) / efpor(i)
       tmpb = MAX( (tmpa-satfrac_liqice(i))/MAX(0.01_r_2,(1._r_2-satfrac_liqice(i))), 0._r_2)
       tmpa = -2._r_2*soil%bch_vec(i,1)*soil%sucs_vec(i,1)/dzmm
       qinmax = (1._r_2 + tmpa*(tmpb-1._r_2))*soil%hyds_vec(i,1)*EXP(-gw_params%hkrz*(0.5*dzmm/1000.0_r_2-gw_params%zdepth))

       ssnow%rnof1(i) = satfrac_liqice(i) * ssnow%fwtop(i) + &
            (1._r_2-satfrac_liqice(i))*MAX((ssnow%fwtop(i)-qinmax) , 0._r_2)

       ssnow%fwtop(i) = ssnow%fwtop(i) - ssnow%rnof1(i)

    END DO  !mp

    !add back to the lakes to keep saturated instead of drying
    DO i=1,mp
       IF (veg%iveg(i) .EQ. 16) THEN
          ssnow%fwtop(i) = ssnow%fwtop(i) + ssnow%rnof1(i)
          ssnow%rnof1(i) = 0._r_2
       END IF
    END DO

    !---  glacier formation
    rnof5= 0.

    IF (sli_call .OR. cable_runtime%UM) THEN
       nglacier = 0
    ELSE
       nglacier = 2
    END IF

    IF (nglacier == 2) THEN
       smelt1=0.
       WHERE( ssnow%snowd > max_glacier_snowd )

          rnof5 = MIN( 0.1, ssnow%snowd - max_glacier_snowd )

          !---- change local tg to account for energy - clearly not best method
          WHERE( ssnow%isflag == 0 )
             smasstot = 0.0
             ssnow%tgg(:,1) = ssnow%tgg(:,1) - rnof5 * C%hlf                    &
                  / REAL( ssnow%gammzz(:,1) )
             ssnow%snowd = ssnow%snowd - rnof5
          ELSEWHERE
             smasstot = ssnow%smass(:,1) + ssnow%smass(:,2) + ssnow%smass(:,3)
          END WHERE

       END WHERE

       DO k = 1, 3

          WHERE( ssnow%snowd > max_glacier_snowd  .AND.  ssnow%isflag > 0 )
             sgamm = ssnow%ssdn(:,k) * C%cgsnow * ssnow%sdepth(:,k)
             smelt1(:,k) = MIN( rnof5 * ssnow%smass(:,k) / smasstot,            &
                  0.2 * ssnow%smass(:,k) )
             ssnow%smass(:,k) = ssnow%smass(:,k) - smelt1(:,k)
             ssnow%snowd = ssnow%snowd - smelt1(:,k)
          END WHERE

       END DO

       WHERE( ssnow%isflag > 0 ) rnof5 = smelt1(:,1) + smelt1(:,2) + smelt1(:,3)

       ssnow%rnof1 = ssnow%rnof1 + rnof5/dels   !include this runoff in suface runoff term

    END IF

  END SUBROUTINE ovrlndflx