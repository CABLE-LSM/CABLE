  SUBROUTINE calc_srf_wet_fraction(ssnow,soil,met,veg)

    IMPLICIT NONE
    TYPE(soil_snow_type), INTENT(INOUT)      :: ssnow  ! soil+snow variables
    TYPE(soil_parameter_type), INTENT(IN)    :: soil ! soil parameters
    TYPE (met_type), INTENT(IN)       :: met
    TYPE (veg_parameter_type), INTENT(IN)    :: veg

    !local variables
    REAL(r_2), DIMENSION(mp)           :: icef,satfrac_liqice,S
    REAL(r_2)                          :: fice,xx
    REAL(r_2)                          :: dzmm_one,liqmass,icemass,totmass
    INTEGER                            :: i,j,k
    REAL(r_2)                          :: wb_unsat,wb_lin,funcval
    REAL(r_2)                          :: derv,slopeSTDmm,func_step
    REAL(r_2)                          :: wb_evap_threshold

    CALL point2constants( C )


    IF (cable_user%or_evap) THEN

       CALL saturated_fraction(ssnow,soil,veg)

       ssnow%wetfac(:) = 1.0

       DO i=1,mp
          IF( ssnow%snowd(i) > 0.1) ssnow%wetfac(i) = 0.9

          IF ( veg%iveg(i) == 16 .AND. met%tk(i) >= C%TFRZ + 5. )   &
               ssnow%wetfac(i) = 1.0 ! lakes: hard-wired number to be removed

          IF( veg%iveg(i) == 16 .AND. met%tk(i) < C%TFRZ + 5. )   &
               ssnow%wetfac(i) = 0.7 ! lakes: hard-wired number to be removed
       END DO

    ELSEIF (cable_user%gw_model) THEN

       CALL saturated_fraction(ssnow,soil,veg)


       DO i = 1,mp
          dzmm_one  = 1000._r_2 * REAL(soil%zse_vec(i,1),r_2)
          icemass  = ssnow%wbice(i,1) * dzmm_one
          liqmass  = (ssnow%wb(i,1)-ssnow%wbice(i,1)) * dzmm_one
          totmass  = MAX(liqmass+icemass,REAL(1e-2,r_2))
          icef(i)     = MAX(0._r_2,MIN(1._r_2, gw_params%IceBeta*icemass / totmass))
       END DO


       !srf frozen fraction.  should be based on topography
       DO i = 1,mp
          fice = (EXP(-gw_params%IceAlpha*(1._r_2-icef(i)))-&
               EXP(-gw_params%IceAlpha))/&
               (1._r_2-EXP(-gw_params%IceAlpha))
          fice = MIN(1._r_2,MAX(0._r_2,fice))

          satfrac_liqice(i) = fice + (1._r_2-fice)*ssnow%satfrac(i)

          wb_unsat = ((ssnow%wb(i,1)-ssnow%wbice(i,1)) -&
               ssnow%satfrac(i)*soil%ssat_vec(i,1))/(1.-ssnow%satfrac(i))
          wb_unsat = MIN(soil%ssat_vec(i,1),MAX(0.,wb_unsat))

          wb_evap_threshold = MIN( MAX( &
               gw_params%SoilEvapAlpha*soil%sfc_vec(i,1), &
               soil%swilt_vec(i,1) ), soil%ssat_vec(i,1) )

          !Sakguchi and Zeng 2009
          IF (wb_unsat .GE. wb_evap_threshold) THEN
             xx = 1.
          ELSE
             xx = 0.25 * (1._r_2 - COS(C%pi*wb_unsat/(wb_evap_threshold)))**2.0
          END IF

          ssnow%wetfac(i) = MAX(0.0,MIN(1.0,satfrac_liqice(i) +&
               (1. - satfrac_liqice(i))*xx ) )

       END DO

    ELSE  !Default formulation

       !call saturated_fraction(ssnow,soil,veg)
       ssnow%satfrac(:) = 1.0e-8
       ssnow%rh_srf(:)  = 1.0

       ssnow%wetfac = MAX( 1.e-6, MIN( 1.0,&
            ( REAL (ssnow%wb(:,1) ) - soil%swilt/ 2.0 )                  &
            / ( soil%sfc - soil%swilt/2.0 ) ) )

       DO i=1,mp

          IF( ssnow%wbice(i,1) > 0. )&
               ssnow%wetfac(i) = ssnow%wetfac(i) * &
               REAL(MAX( 0.5_r_2, 1._r_2 - MIN( 0.2_r_2, &
               ( ssnow%wbice(i,1) / ssnow%wb(i,1) )**2 ) ) )

          IF( ssnow%snowd(i) > 0.1) ssnow%wetfac(i) = 0.9

          IF ( veg%iveg(i) == 16 .AND. met%tk(i) >= C%tfrz + 5. )   &
               ssnow%wetfac(i) = 1.0 ! lakes: hard-wired number to be removed

          IF( veg%iveg(i) == 16 .AND. met%tk(i) < C%tfrz + 5. )   &
               ssnow%wetfac(i) = 0.7 ! lakes: hard-wired number to be removed

       ENDDO
       ! owetfac introduced to reduce sharp changes in dry regions,
       ! especially in offline runs in which there may be discrepancies b/n
       ! timing of precip and temperature change (EAK apr2009)
       ssnow%wetfac = 0.5*(ssnow%wetfac + ssnow%owetfac)

    ENDIF  !or_evap, gw_model, or default wetfac parameterization

  END SUBROUTINE calc_srf_wet_fraction